(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{625:function(t,s,a){"use strict";a.r(s);var v=a(14),l=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"计算机网络面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络面试题"}},[t._v("#")]),t._v(" 计算机网络面试题")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#http1-1-2-0-3-0区别"}},[t._v("http1.1 /2.0/3.0区别")])]),a("li",[a("a",{attrs:{href:"#为什么说http是无状态的-怎么解决呢"}},[t._v("为什么说http是无状态的,怎么解决呢？")])]),a("li",[a("a",{attrs:{href:"#https-握手和加密过程-为什么https就能安全"}},[t._v("https 握手和加密过程，为什么https就能安全？")])]),a("li",[a("a",{attrs:{href:"#https服务器给客户端发送证书过程中给黑客篡改了怎么办"}},[t._v("https服务器给客户端发送证书过程中给黑客篡改了怎么办?")])]),a("li",[a("a",{attrs:{href:"#tcp和udp区别"}},[t._v("TCP和UDP区别？")])]),a("li",[a("a",{attrs:{href:"#tcp三次握手和四次挥手-为什么要三次和四次-多了或少了怎么样"}},[t._v("TCP三次握手和四次挥手，为什么要三次和四次？多了或少了怎么样？")])]),a("li",[a("a",{attrs:{href:"#get和post区别"}},[t._v("GET和POST区别？")])]),a("li",[a("a",{attrs:{href:"#tcp解决拥塞的方案"}},[t._v("TCP解决拥塞的方案")])]),a("li",[a("a",{attrs:{href:"#访问url到浏览器出现页面之间发生了什么"}},[t._v("访问url到浏览器出现页面之间发生了什么?")])]),a("li",[a("a",{attrs:{href:"#dns查询过程"}},[t._v("DNS查询过程")])]),a("li",[a("a",{attrs:{href:"#dns预查询"}},[t._v("DNS预查询")])]),a("li",[a("a",{attrs:{href:"#http状态码有哪些-304代表什么-206呢"}},[t._v("http状态码有哪些？304代表什么？206呢？")])]),a("li",[a("a",{attrs:{href:"#强缓存和协商缓存"}},[t._v("强缓存和协商缓存")])]),a("li",[a("a",{attrs:{href:"#缓存策略是怎样的-缓存存放位置"}},[t._v("缓存策略是怎样的？缓存存放位置？")])]),a("li",[a("a",{attrs:{href:"#预加载和预渲染-预解析"}},[t._v("预加载和预渲染，预解析")])]),a("li",[a("a",{attrs:{href:"#懒加载和按需加载"}},[t._v("懒加载和按需加载")])]),a("li",[a("a",{attrs:{href:"#websocket理解-应用场景"}},[t._v("websocket理解，应用场景？")])]),a("li",[a("a",{attrs:{href:"#cnd的原理和好处"}},[t._v("CND的原理和好处")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"http1-1-2-0-3-0区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-2-0-3-0区别"}},[t._v("#")]),t._v(" http1.1 /2.0/3.0区别")]),t._v(" "),a("blockquote",[a("p",[t._v("幂等和副作用")])]),t._v(" "),a("ul",[a("li",[t._v("副作用是指对服务器上的资源做改变，搜索是无副作用的，注册是有副作用的。")]),t._v(" "),a("li",[t._v("幂等是指对服务器发送1到N次请求，服务器上的资源一致，如搜索关键词。")])]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("HTTP版本")]),a("ol",[a("li",[t._v("1.0  (1996年5月)")])]),t._v(" "),a("ul",[a("li",[t._v("除了GET命令，还引入POST命令和HEAD命令")]),t._v(" "),a("li",[t._v("可以传输任何格式内容，包括文字、图片、视频、二进制。")]),t._v(" "),a("li",[t._v("因为http是无连接和无状态的，存在无法复用链接和队头阻塞问题。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("1.1 (1997年1月1)")])]),t._v(" "),a("ul",[a("li",[t._v("默认开启keep Alive(1.0就有，但是1.1默认开启)，也就是持久连接(persistent connection)")]),t._v(" "),a("li",[t._v("引入了管道机制（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求")]),t._v(" "),a("li",[t._v("增加缓存处理（新的字段如cache-control，强缓存和协商缓存）")]),t._v(" "),a("li",[t._v("增加Host字段（使得一个服务器能够用来创建多个Web站点）、支持断点传输等")]),t._v(" "),a("li",[t._v("http协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度)")]),t._v(" "),a("li",[t._v("1.1版本允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应，可能会造成Head-of-line blocking的问题")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("2.0 (2015年5月)")])]),t._v(" "),a("ul",[a("li",[t._v('http/2是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"（frame）：头信息帧和数据帧。(封装成帧)')]),t._v(" "),a("li",[t._v("HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送。(服务器推送)")]),t._v(" "),a("li",[t._v("引入头信息压缩机制（ header compression） ,头信息使用gzip或compress压缩后再发送。(头部压缩)")]),t._v(" "),a("li",[t._v("HTTP 1.x 并没有真正意义上的解决连接复用问题,连接共享意味着客户端与服务器之间也只需要一个连接即可，这样即使来自很多流的数据包也能够混合在一起通过同样连接传输，再根据不同帧首部的 stream id 标识符重新连接将不同的数据流进行组装(多路复用/链接共享)")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("3.0")])]),t._v(" "),a("ul",[a("li",[t._v("HTTP3.0不使用TCP协议，而是使用全新的QUIC协议(也就是UDP)，这个协议能让你通过 UDP 创建一系列带状态的流，解决TCP队头阻塞问题。")])])]),a("h2",{attrs:{id:"为什么说http是无状态的-怎么解决呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么说http是无状态的-怎么解决呢"}},[t._v("#")]),t._v(" 为什么说http是无状态的,怎么解决呢？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("无状态")]),a("p",[t._v("服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端也不记录过去的请求（无状态），服务器不会在两个请求之间保留任何数据（状态），比如比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("可以借助cookie来保存状态")])])]),a("h2",{attrs:{id:"https-握手和加密过程-为什么https就能安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-握手和加密过程-为什么https就能安全"}},[t._v("#")]),t._v(" https 握手和加密过程，为什么https就能安全？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("blockquote",[a("p",[t._v("非对称加密，对称加密，数字证书CA")])]),t._v(" "),a("ul",[a("li",[t._v("http是明文传输的，无法验证报文的完整性，无法验证双方的身份")]),t._v(" "),a("li",[t._v("HTTPS 是基于 HTTP 协议的，会使用 TLS/SSL 来对数据加密，所有的信息都是加密的，并且它提供了一种校验机制，信息一旦被篡改，通信的双方会立刻发现,它还配备了数字身份证书CA，防止身份被冒充的情况出现，第三方没有办法窃听")]),t._v(" "),a("li",[t._v("TCP三次握手后开始进行TLS握手\n"),a("ul",[a("li",[t._v("TLS第一次握手，客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个"),a("strong",[t._v("随机数")]),t._v("，以及客户端支持的加密方法")]),t._v(" "),a("li",[t._v("第二次，服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数")]),t._v(" "),a("li",[t._v("第三步，客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，如果服务端需要验证客户端证书的话会附带证书然后发给服务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。")]),t._v(" "),a("li",[t._v("第四步，服务器收到加密过的随机值使用自己的私钥，来解密客户端发送过来的随机数获得第三个随机数。并提供前面所有内容的 hash 值来供客户端检验。")]),t._v(" "),a("li",[t._v("第五步，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密⽅式⽣成密钥，接下来的通信就可以通过该密钥来加密解密.客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。")])])])])]),a("h2",{attrs:{id:"https服务器给客户端发送证书过程中给黑客篡改了怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https服务器给客户端发送证书过程中给黑客篡改了怎么办"}},[t._v("#")]),t._v(" https服务器给客户端发送证书过程中给黑客篡改了怎么办?")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("p",[t._v("浏览器内置了各大CA机构的公钥信息，如果证书被篡改，浏览器就提示不可信，终止通信。因为证书中包含数字签名，用于作防伪标识。")])]),a("h2",{attrs:{id:"tcp和udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp区别"}},[t._v("#")]),t._v(" TCP和UDP区别？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("ul",[a("li",[t._v("TCP是面向链接的，需要经过三次握手才能建立链接，而UDP是无连接的，不需要握手。")]),t._v(" "),a("li",[t._v("TCP是可靠的，UDP不可靠。TCP有拥塞控制，流量控制等一系列保证接受的报文是完整的，在网络差的情况下会限制速率，而UDP没有， UDP 报文段的发送速率没有限制。")]),t._v(" "),a("li",[t._v("UDP 可以支持一对一、一对多、多对一和多对多的交互通信。TCP全双工")]),t._v(" "),a("li",[t._v("高性能用UDP，高稳定用TCP。如视频会话，游戏等对延迟敏感的用UDP，对数据完整性如")]),t._v(" "),a("li",[t._v("TCP首部20个字节，UDP8个。")])])]),a("h2",{attrs:{id:"tcp三次握手和四次挥手-为什么要三次和四次-多了或少了怎么样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手和四次挥手-为什么要三次和四次-多了或少了怎么样"}},[t._v("#")]),t._v(" TCP三次握手和四次挥手，为什么要三次和四次？多了或少了怎么样？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")])]),a("h2",{attrs:{id:"get和post区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别"}},[t._v("#")]),t._v(" GET和POST区别？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("p",[t._v("Post 和 Get 是 HTTP 请求的两种方法。")]),t._v(" "),a("p",[t._v("（1）从应用场景上来说，GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网 页。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景。比如注册用户这一类的操作。")]),t._v(" "),a("p",[t._v("（2）因为不同的应用场景，所以浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。")]),t._v(" "),a("p",[t._v("（3）从发送的报文格式来说，Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。")]),t._v(" "),a("p",[t._v("（4）但是 Get 请求也可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说，一个方面是不太安全， 因为请求的 url 会被保留在历史记录中。并且浏览器由于对 url 有一个长度上的限制，所以会影响 get 请求发送数据时 的长度。这个限制是浏览器规定的，并不是 RFC 规定的。还有就是 post 的参数传递支持更多的数据类型。")])]),a("h2",{attrs:{id:"tcp解决拥塞的方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp解决拥塞的方案"}},[t._v("#")]),t._v(" TCP解决拥塞的方案")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")])]),a("h2",{attrs:{id:"访问url到浏览器出现页面之间发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问url到浏览器出现页面之间发生了什么"}},[t._v("#")]),t._v(" 访问url到浏览器出现页面之间发生了什么?")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")])]),a("h2",{attrs:{id:"dns查询过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns查询过程"}},[t._v("#")]),t._v(" DNS查询过程")]),t._v(" "),a("blockquote",[a("p",[t._v("为了保证响应的及时，DNS解析使用的是UDP协议.为了节省时间，可以在HTML头部去做DNS的预解析")])]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("ul",[a("li",[t._v("浏览器的DNS缓存；")]),t._v(" "),a("li",[t._v("操作系统的DNS缓存;")]),t._v(" "),a("li",[t._v("路由器的DNS缓存；")]),t._v(" "),a("li",[t._v("向服务商的DNS服务器查询；")]),t._v(" "),a("li",[t._v("向全球13台根域名服务器查询；")])])]),a("h2",{attrs:{id:"dns预查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns预查询"}},[t._v("#")]),t._v(" DNS预查询")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("div",{staticClass:"language-http request line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[t._v('<link rel="dns-prefetch" href="https://google.com/"> \n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),a("h2",{attrs:{id:"http状态码有哪些-304代表什么-206呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码有哪些-304代表什么-206呢"}},[t._v("#")]),t._v(" http状态码有哪些？304代表什么？206呢？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("ul",[a("li",[t._v("2XX\n"),a("ul",[a("li",[t._v("200 成功")]),t._v(" "),a("li",[t._v("206 部分成功，文件上传断点续传")])])]),t._v(" "),a("li",[t._v("3XX\n"),a("ul",[a("li",[t._v("301 永久重定向")]),t._v(" "),a("li",[t._v("302 临时重定向")]),t._v(" "),a("li",[t._v("304 协商缓存命中")])])]),t._v(" "),a("li",[t._v("4XX\n"),a("ul",[a("li",[t._v("403 没有权限，被服务器禁止访问")]),t._v(" "),a("li",[t._v("404 在服务器上找不到该资源")])])]),t._v(" "),a("li",[t._v("5XX\n"),a("ul",[a("li",[t._v("500 服务器端在执⾏请求时发⽣了错误")]),t._v(" "),a("li",[t._v("503 服务器暂时处于超负载或正在停机维护，⽆法处理请求")])])])])]),a("h2",{attrs:{id:"强缓存和协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存"}},[t._v("#")]),t._v(" 强缓存和协商缓存")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("blockquote",[a("p",[t._v("强缓存是强制缓存的意思，只要不是nostore和nocache都会先走强缓存")])]),t._v(" "),a("ul",[a("li",[t._v("缓存优先级\n"),a("ul",[a("li",[t._v("强缓存 > 协商缓存")]),t._v(" "),a("li",[t._v("强缓存: Cache Control > Expire")]),t._v(" "),a("li",[t._v("协商缓存: ETag > Last Modyify")])])])])]),a("h2",{attrs:{id:"缓存策略是怎样的-缓存存放位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略是怎样的-缓存存放位置"}},[t._v("#")]),t._v(" 缓存策略是怎样的？缓存存放位置？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("blockquote",[a("p",[t._v("浏览器缓存就是把一个已经请求过的web资源（如html页面，图片，JS，数据）拷贝一份放在浏览器中")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("缓存策略")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先通过Cache-Control验证强缓存是否可用")]),t._v(" "),a("ul",[a("li",[t._v("如果可用，则直接使用缓存(返回状态码200)")]),t._v(" "),a("li",[t._v("不可用进入协商缓存，发送http请求，根据服务器返回的响应头，决定是否缓存")])])]),t._v(" "),a("li",[a("p",[t._v("根据If-Modified-Since和If-None-Match来判断是否可以使用协商缓存")]),t._v(" "),a("ul",[a("li",[t._v("资源有更新，返回状态码200和请求资源")]),t._v(" "),a("li",[t._v("资源无修改，返回状态码304，浏览器读取缓存")])])]),t._v(" "),a("li",[a("p",[t._v("强缓存是不需要发送HTTP请求的, 而协商缓存需要")])]),t._v(" "),a("li",[a("p",[t._v("缓存位置")]),t._v(" "),a("ul",[a("li",[t._v("SERVICE WORKER")]),t._v(" "),a("li",[t._v("MEMORY CACHE")]),t._v(" "),a("li",[t._v("DISK CHCHE")]),t._v(" "),a("li",[t._v("PUSH CACHE")]),t._v(" "),a("li",[t._v("发起请求")])])])])])]),a("h2",{attrs:{id:"预加载和预渲染-预解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预加载和预渲染-预解析"}},[t._v("#")]),t._v(" 预加载和预渲染，预解析")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("blockquote",[a("p",[t._v("prefetch和preload的区别")])]),t._v(" "),a("ul",[a("li",[t._v("Preload 来告诉浏览器预先请求当前页需要的资源，从而提高这些资源的请求优先级")]),t._v(" "),a("li",[t._v("Prefetch 来告诉浏览器用户将来可能在其他页面（非本页面）可能使用到的资源，那么浏览器会在空闲时，就去预先加载这些资源放在 http 缓存内，最常见的 dns-prefetch")])]),t._v(" "),a("blockquote",[a("p",[t._v("DNS预解析")])]),t._v(" "),a("div",{staticClass:"language-http request line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[t._v('<link rel="dns-prefetch" href="https://google.com/"> \n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),a("h2",{attrs:{id:"懒加载和按需加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载和按需加载"}},[t._v("#")]),t._v(" 懒加载和按需加载")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("ul",[a("li",[t._v("先加载可视区域内的内容，其他随着滚动的时候再陆续加载，提升网页性能的手段。")])])]),a("h2",{attrs:{id:"websocket理解-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket理解-应用场景"}},[t._v("#")]),t._v(" websocket理解，应用场景？")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("ul",[a("li",[t._v("WebSocket是一种网络传输协议，是HTML5出的东西，并不属于HTTP，用于解决HTTP的问题，但是随着HTTP不断升级，WS的优点都被吸收过去了，就像现在原生JS吸收了许多JQ的优点，没必要使用JQ了。")]),t._v(" "),a("li",[t._v("没有跨域的限制，也就是自带跨域的功能。")]),t._v(" "),a("li",[t._v("服务器推送，这个在http2.0被抄去了。")]),t._v(" "),a("li",[t._v("二进制帧，也被抄去了，但具体实现有区别。")]),t._v(" "),a("li",[t._v("全双工，需要握手")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("应用场景 弹幕、视频聊天、股票情况实时更新")])])])]),a("h2",{attrs:{id:"cnd的原理和好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cnd的原理和好处"}},[t._v("#")]),t._v(" CND的原理和好处")]),t._v(" "),a("div",{staticClass:"theorem"},[a("p",{staticClass:"title"},[t._v("THEOREM")]),a("p",[t._v("CDN 是一个内容分发网络，通过对源网站资源的缓存，利用本身多台位于不同地域、不同运营商的服务器，向用户提供资就近访问的 功能。也就是说，用户的请求并不是直接发送给源网站，而是发送给 CDN 服务器，由 CND 服务器将请求定位到最近的含有该资源 的服务器上去请求。这样有利于提高网站的访问速度，同时通过这种方式也减轻了源服务器的访问压力。")])])])}),[],!1,null,null,null);s.default=l.exports}}]);