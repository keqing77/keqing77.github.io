(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{734:function(e,t,s){"use strict";s.r(t);var o=s(14),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"nodejs-和-浏览器关于eventloop的主要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-和-浏览器关于eventloop的主要区别"}},[e._v("#")]),e._v(" nodejs 和 浏览器关于eventLoop的主要区别")]),e._v(" "),s("p",[e._v("两者最主要的区别在于浏览器中的微任务是在 每个相应的宏任务 中执行的，而nodejs中的微任务是在 不 同阶段之间 执行的。")]),e._v(" "),s("h2",{attrs:{id:"process-nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick"}},[e._v("#")]),e._v(" process.nextTick")]),e._v(" "),s("p",[e._v("process.nextTick 是一个独立于 eventLoop 的任务队列。\n在每一个 eventLoop 阶段完成后会去检查这个队列，如果里面有任务，会让这部分任务 优先于微任务 执\n行")]),e._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("先来一句结论  在前面的执行越早\nprocess.nextTick()  > promise > setTimeout()     setImmediate() 和setTimeout 执行时机不确定，取决于实际情况")])])}),[],!1,null,null,null);t.default=n.exports}}]);