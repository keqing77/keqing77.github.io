(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{562:function(t,s,a){t.exports=a.p+"assets/img/react-fiber.3d17b64b.png"},635:function(t,s,a){"use strict";a.r(s);var e=a(14),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react面试题"}},[t._v("#")]),t._v(" React面试题")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#前端主流框架的比较和区别"}},[t._v("前端主流框架的比较和区别？")])]),e("li",[e("a",{attrs:{href:"#为什么react和vue都要用虚拟dom"}},[t._v("为什么React和Vue都要用虚拟DOM？")])]),e("li",[e("a",{attrs:{href:"#什么是函数式编程-fp-和面向对象-oop-有什么区别"}},[t._v("什么是函数式编程(FP)? 和面向对象(OOP) 有什么区别？")])]),e("li",[e("a",{attrs:{href:"#你是怎么理解函数式编程的"}},[t._v("你是怎么理解函数式编程的？")])]),e("li",[e("a",{attrs:{href:"#什么是纯函数-什么是副作用"}},[t._v("什么是纯函数？什么是副作用？")])]),e("li",[e("a",{attrs:{href:"#react的diff算法原理-和vue的diff对比哪个高效"}},[t._v("React的diff算法原理，和Vue的diff对比哪个高效？")])]),e("li",[e("a",{attrs:{href:"#对react-fiber的理解-它解决了什么问题"}},[t._v("对React-Fiber的理解? 它解决了什么问题")])]),e("li",[e("a",{attrs:{href:"#react如何判断何时重新渲染组件-如何避免不需要的render"}},[t._v("React如何判断何时重新渲染组件？如何避免不需要的render？")])]),e("li",[e("a",{attrs:{href:"#有状态组件和无状态组件的区别-各自的使用场景"}},[t._v("有状态组件和无状态组件的区别？各自的使用场景？")])]),e("li",[e("a",{attrs:{href:"#什么是受控组件和非受控组件"}},[t._v("什么是受控组件和非受控组件？")])]),e("li",[e("a",{attrs:{href:"#什么是高阶组件"}},[t._v("什么是高阶组件？")])]),e("li",[e("a",{attrs:{href:"#对react-portals的理解-使用场景"}},[t._v("对React Portals的理解，使用场景？")])]),e("li",[e("a",{attrs:{href:"#谈谈react-hooks-函数式组件-的理解-以及它的优缺点"}},[t._v("谈谈React Hooks(函数式组件)的理解，以及它的优缺点")])]),e("li",[e("a",{attrs:{href:"#为什么usestate要使用数组而不是对象-hooks使用限制"}},[t._v("为什么useState要使用数组而不是对象？hooks使用限制？")])]),e("li",[e("a",{attrs:{href:"#如何通过useeffect模拟生命周期"}},[t._v("如何通过useEffect模拟生命周期？")])]),e("li",[e("a",{attrs:{href:"#组件间通信的方式"}},[t._v("组件间通信的方式")])]),e("li",[e("a",{attrs:{href:"#ref和state的区别"}},[t._v("Ref和State的区别？")])]),e("li",[e("a",{attrs:{href:"#react-memo解决了什么问题"}},[t._v("React.memo解决了什么问题？")])]),e("li",[e("a",{attrs:{href:"#对react-context的理解"}},[t._v("对React Context的理解？")])]),e("li",[e("a",{attrs:{href:"#react在页面重新加载时怎样保留状态"}},[t._v("React在页面重新加载时怎样保留状态")])]),e("li",[e("a",{attrs:{href:"#react-router"}},[t._v("React-Router")])]),e("li",[e("a",{attrs:{href:"#react-redux"}},[t._v("React-Redux")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"前端主流框架的比较和区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端主流框架的比较和区别"}},[t._v("#")]),t._v(" 前端主流框架的比较和区别？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("前端框架做的事情")]),e("blockquote",[e("p",[t._v("一个公式概括 : UI = f(state)")])]),t._v(" "),e("p",[t._v("这个公式的意思就是 框架内部机制 根据 "),e("strong",[t._v("状态(state)")]),t._v(" 渲染  "),e("strong",[t._v("视图(UI)")])]),t._v(" "),e("ul",[e("li",[t._v("一个页面可以划分成三个大小层级，(应用级、组件级、节点级)")]),t._v(" "),e("li",[t._v("框架的区别主要在于"),e("strong",[t._v("更新粒度")]),t._v("的区别\n"),e("ul",[e("li",[t._v("React和Vue是更新到应用级")]),t._v(" "),e("li",[t._v("Angular是更新到组件级")]),t._v(" "),e("li",[t._v("Sevelte是更新到节点级")])])])])]),e("h2",{attrs:{id:"为什么react和vue都要用虚拟dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么react和vue都要用虚拟dom"}},[t._v("#")]),t._v(" 为什么React和Vue都要用虚拟DOM？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("修改真实DOM和Virtual DOM的过程，对比它们重排重绘的性能消耗")]),e("ul",[e("li",[t._v("真实DOM∶ 生成HTML字符串＋ 重建所有的DOM元素")]),t._v(" "),e("li",[t._v("Virtual DOM∶ 生成VNode(虚拟节点) ＋ DOM diff(对比算法) ＋ 必要的DOM更新")]),t._v(" "),e("li",[t._v("操作DOM的代价是很高昂的，一个DOM结点有几千个属性，创建和生成都需要大量计算")]),t._v(" "),e("li",[e("strong",[t._v("引入虚拟DOM的原因主要在于 能更快的开发应用，开发者写的更爽同时保证性能还不错")])])]),t._v(" "),e("p",[t._v("如果不是很复杂的应用，直接操作真实的DOM可能更快，但是如果是复杂的应用，比如有大量的组件，那么操作真实的DOM就会比较慢，因为每个组件都会生成一个真实的DOM。")])]),e("h2",{attrs:{id:"什么是函数式编程-fp-和面向对象-oop-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是函数式编程-fp-和面向对象-oop-有什么区别"}},[t._v("#")]),t._v(" 什么是函数式编程(FP)? 和面向对象(OOP) 有什么区别？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("SPA(Single-Page-Application)")]),e("ul",[e("li",[t._v("编程的本质就是 对 "),e("strong",[t._v("数据")]),t._v(" 的操作")]),t._v(" "),e("li",[t._v("传统面向对象是把 "),e("strong",[t._v("数据")]),t._v(" 装进 对象里面，操作对象去操作数据")]),t._v(" "),e("li",[t._v("函数式编程是吧 "),e("strong",[t._v("数据")]),t._v(" 和 函数分开，通过"),e("strong",[t._v("函数去操作数据")])])])]),e("h2",{attrs:{id:"你是怎么理解函数式编程的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你是怎么理解函数式编程的"}},[t._v("#")]),t._v(" 你是怎么理解函数式编程的？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("blockquote",[e("p",[t._v("函数式编程的一些概念")])]),t._v(" "),e("ol",[e("li",[t._v("纯函数(pure function)")]),t._v(" "),e("li",[t._v("副作用(effect)")]),t._v(" "),e("li",[t._v("闭包（Closure）")]),t._v(" "),e("li",[t._v("高阶函数(HOF)")]),t._v(" "),e("li",[t._v("柯里化（Currying）")]),t._v(" "),e("li",[t._v("组合（Composing）")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("函数式来处理这些数据，就可以使得数据的每一次修改都可以变得可以追溯，可以很容易的定位到问题的所在")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("FP 相比OOP ，对编程开发人员技术要求更高，需要对程序的理解更深入，但开发人员经验、水平素质良莠不齐，为了统一协作采用OOP沟通成本更低")]),t._v("。")])]),e("h2",{attrs:{id:"什么是纯函数-什么是副作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是纯函数-什么是副作用"}},[t._v("#")]),t._v(" 什么是纯函数？什么是副作用？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("纯函数和副作用")]),e("ul",[e("li",[e("p",[t._v("纯函数: 通过传入参数和返回值进行沟通,相同的传入参数永远只会有相同的返回值，没有副作用")])]),t._v(" "),e("li",[e("p",[t._v("函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量）或修改参数,、调用DOM API修改页面，发送Ajax请求、调用window.reload刷新浏览器甚至是console.log打印数据。")])]),t._v(" "),e("li",[e("p",[t._v("纯函数对于相同的输入有相同的输出，可以将结果进行存储缓存以提高性能")])]),t._v(" "),e("li",[e("p",[t._v("更方便追踪数据修改的来源，同时让测试更加方便")])]),t._v(" "),e("li",[e("p",[t._v("并行处理时，纯函数不需要访问共享的内存数据，任意运行")])])])]),e("blockquote",[e("p",[t._v("纯函数和非纯函数")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//纯函数  返回结果只依赖于它的参数 a 和 b，sum(1, 2) 永远是 3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b \n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//非纯函数   返回值与a相关，结果无法预料")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 副作用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 变成了10")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("h2",{attrs:{id:"react的diff算法原理-和vue的diff对比哪个高效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的diff算法原理-和vue的diff对比哪个高效"}},[t._v("#")]),t._v(" React的diff算法原理，和Vue的diff对比哪个高效？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("React和Vue的diff算法原理和对比")]),e("blockquote",[e("p",[t._v("虚拟DOM就是JavaScript对象，用对象来表示DOM节点结构")])]),t._v(" "),e("ul",[e("li",[t._v("两者都是基于虚拟DOM + diff算法的，两者都会在首屏渲染后根据DOM树生成一颗虚拟DOM树，当数据(状态)发生变化时，会重新生成一颗新的虚拟DOM树，然后对比两颗虚拟DOM树，找出变化的部分，然后更新DOM树。")]),t._v(" "),e("li",[t._v("两者都对diff算法进行优化，因为不优化需要每次遍历旧的树，遍历新的树，再重新对比排序，时间复杂度是O(n^3)")]),t._v(" "),e("li",[t._v("优化后的diff算法\n"),e("ul",[e("li",[t._v("新旧虚拟DOM只会比较同级节点，不会跨级对比")]),t._v(" "),e("li",[t._v("比较后标签名不同，直接删除，不会往下进行比较")]),t._v(" "),e("li",[t._v("标签名相同，会判断key是否相同，相同则认为是同一个结点，也不会往下进行比较")])])]),t._v(" "),e("li",[t._v("React是会重新生成一颗"),e("strong",[t._v("完整的虚拟DOM树")]),t._v("，而Vue"),e("strong",[t._v("只为状态改变的组件生成新的DOM树")])]),t._v(" "),e("li",[t._v("Vue的diff相对React更加高效，因为减少了很多虚拟DOM的创建和开销，而且在Vue3中还加入预编译和flag标记，diff的性能更加高效。")])])]),e("h2",{attrs:{id:"对react-fiber的理解-它解决了什么问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对react-fiber的理解-它解决了什么问题"}},[t._v("#")]),t._v(" 对React-Fiber的理解? 它解决了什么问题")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("React-Fiber")]),e("blockquote",[e("p",[t._v("因为JavaScript在浏览器的主线程上运行，如果JavaScript运行时间过长，就会阻塞渲染进程，渲染的画面数变少，直接导致帧数下降(掉帧)，反映就是页面卡顿(动画或者滚动有顿挫感)。")])]),t._v(" "),e("ul",[e("li",[t._v("我的理解是相当于 时间切片，或者 "),e("strong",[t._v("协程")])]),t._v(" "),e("li",[t._v("Fiber把可中断的工作拆分成小任务，对正在做的工作调整优先次序(优先级)、重做、复用上次（做了一半的）成果")]),t._v(" "),e("li",[t._v("在diff的过程中，js会比较一部分虚拟dom，然后让出主线程，给浏览器去做其他工作，然后继续比较，依次往复，等到最后比较完成，一次性更新到视图上。")]),t._v(" "),e("li",[t._v("下图应该非常直观，就是让JS工作切片，执行完一个小切片就让浏览器去渲染，时间没有减少，但不会让应用迟迟没有渲染而导致卡顿。\n"),e("img",{attrs:{src:a(562),alt:"react-fiber"}})])])]),e("h2",{attrs:{id:"react如何判断何时重新渲染组件-如何避免不需要的render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react如何判断何时重新渲染组件-如何避免不需要的render"}},[t._v("#")]),t._v(" React如何判断何时重新渲染组件？如何避免不需要的render？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("ul",[e("li",[e("strong",[t._v("只要组件的state发生变化，React就会对组件进行重新渲染")])])]),t._v(" "),e("blockquote",[e("p",[t._v("避免不需要的render")])]),t._v(" "),e("ul",[e("li",[t._v("因为React中的shouldComponentUpdate方法默认返回true，这就是导致每次更新都重新渲染的原因。")]),t._v(" "),e("li",[t._v("可以重写shouldComponentUpdate方法让它根据情况返回true或者false来告诉React什么时候重新渲染什么时候跳过重新渲染。")]),t._v(" "),e("li",[t._v("可以利用 shouldComponentUpdate或者 PureComponent 来减少因父组件更新而触发子组件的 render")]),t._v(" "),e("li",[t._v("利用React.memo 缓存组件的渲染，避免不必要的渲染。")])])]),e("h2",{attrs:{id:"有状态组件和无状态组件的区别-各自的使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件和无状态组件的区别-各自的使用场景"}},[t._v("#")]),t._v(" 有状态组件和无状态组件的区别？各自的使用场景？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("状态组件")]),e("blockquote",[e("p",[t._v("有状态组件")])]),t._v(" "),e("ul",[e("li",[t._v("内部使用state，维护自身状态的变化")]),t._v(" "),e("li",[t._v("状态组件根据外部组件传入的 props 和自身的 state进行渲染")])]),t._v(" "),e("blockquote",[e("p",[t._v("无状态组件")])]),t._v(" "),e("ul",[e("li",[t._v("不依赖自身的状态state")]),t._v(" "),e("li",[t._v("组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。")])]),t._v(" "),e("blockquote",[e("p",[t._v("使用场景")])]),t._v(" "),e("ul",[e("li",[t._v("无状态组件: 纯展示类型的组件")]),t._v(" "),e("li",[t._v("有状态的组件: 内部需要管理状态的组件")])])]),e("h2",{attrs:{id:"什么是受控组件和非受控组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是受控组件和非受控组件"}},[t._v("#")]),t._v(" 什么是受控组件和非受控组件？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("受控组件和非受控组件 (只存在于表单元素)")]),e("ul",[e("li",[t._v("受控组件就是表单元素的value通过state(useState)来定义")]),t._v(" "),e("li",[t._v("非受控组件就是表单元素的value无法通过state获取，只能使用ref(useRef)来获取")]),t._v(" "),e("li",[t._v("比如要获取input输入框的值，有2种方法\n"),e("ol",[e("li",[t._v("获取input DOM，")]),t._v(" "),e("li",[t._v("让input的value 被管理起来，也就是通过state来定义")])])])])]),e("h2",{attrs:{id:"什么是高阶组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是高阶组件"}},[t._v("#")]),t._v(" 什么是高阶组件？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("blockquote",[e("p",[t._v("高阶组件（HOC）就是一个函数，该函数接受一个组件作为参数，并返回一个新的组件")])]),t._v(" "),e("p",[t._v("高阶函数: 一个函数返回另一个函数\n高阶组件: 一个组件返回另一个组件")])]),e("h2",{attrs:{id:"对react-portals的理解-使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对react-portals的理解-使用场景"}},[t._v("#")]),t._v(" 对React Portals的理解，使用场景？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("React Portals")]),e("blockquote",[e("p",[t._v("参考Vue3的Teleport(传送门)，都可以将子节点渲染到存在于父组件以外的 DOM节点")])]),t._v(" "),e("div",{staticClass:"language-jsx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sonComponent "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./sonComponent'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sonComponent元素会被挂载在id为parent的div的元素上")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("parent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoComponent")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有overflow: hidden或者z-index的样式设置时，组件有可能被其他元素遮挡，这时就可以考虑要不要使用Portal使组件的挂载脱离父组件。")])]),t._v(" "),e("blockquote",[e("p",[t._v("例如：对话框，模态窗。")])])]),e("h2",{attrs:{id:"谈谈react-hooks-函数式组件-的理解-以及它的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈react-hooks-函数式组件-的理解-以及它的优缺点"}},[t._v("#")]),t._v(" 谈谈React Hooks(函数式组件)的理解，以及它的优缺点")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("blockquote",[e("p",[t._v("hooks就是函数式组件，一个React组件就是一个函数")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("类组件是基于面向对象编程,函数式组件Hooks是基于函数式编程的")]),t._v(" "),e("ul",[e("li",[t._v("优点\n"),e("ul",[e("li",[t._v("更容易复用代码")]),t._v(" "),e("li",[t._v("没有class组件中烦人this指向问题")]),t._v(" "),e("li",[t._v("运用函数式编程思维")])])]),t._v(" "),e("li",[t._v("缺点\n"),e("ul",[e("li",[t._v("hooks没有生命周期,但可以用useEffect模拟"),e("strong",[t._v("部分生命周期")])])])])])])]),e("h2",{attrs:{id:"为什么usestate要使用数组而不是对象-hooks使用限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么usestate要使用数组而不是对象-hooks使用限制"}},[t._v("#")]),t._v(" 为什么useState要使用数组而不是对象？hooks使用限制？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("blockquote",[e("p",[e("code",[t._v("const [count, setCount] = useState(0)")]),t._v("\n为什么是返回数组而不是返回对象呢？")])]),t._v(" "),e("ul",[e("li",[t._v("因为解构赋值后，对象可以重命名，而对象需要同名，使用多次需要设置别名")]),t._v(" "),e("li",[t._v("useState 返回的是 array 而不是 object 的原因就是为了降低使用的复杂度，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了")])]),t._v(" "),e("blockquote",[e("p",[t._v("hooks使用限制")])]),t._v(" "),e("ul",[e("li",[t._v("hooks只能用在组件函数的最顶层")]),t._v(" "),e("li",[t._v("不要在循环，条件或嵌套函数中调用Hook")]),t._v(" "),e("li",[t._v("只能在React函数式组件或自定义Hook中使用Hook")])]),t._v(" "),e("p",[t._v("这是因为React需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。")])]),e("h2",{attrs:{id:"如何通过useeffect模拟生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何通过useeffect模拟生命周期"}},[t._v("#")]),t._v(" 如何通过useEffect模拟生命周期？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("使用了Hooks的函数组件才有生命周期")]),e("blockquote",[e("p",[t._v("Hooks 组件（使用了Hooks的函数组件）有生命周期，而函数组件（未使用Hooks的函数组件）是没有生命周期的")])]),t._v(" "),e("ul",[e("li",[t._v("第二个参数传空数组,可以模拟生命周期componentDidMount")]),t._v(" "),e("li",[t._v("第二个参数传递依赖项,可以模拟生命周期componentDidUpdata")]),t._v(" "),e("li",[t._v("在useEffect return一个方法,可以模拟生命周期componentWillUnmount")])])]),e("h2",{attrs:{id:"组件间通信的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件间通信的方式"}},[t._v("#")]),t._v(" 组件间通信的方式")]),t._v(" "),e("ul",[e("li",[t._v("父传子: 父向子传props")]),t._v(" "),e("li",[t._v("子传父: 父向子传props,props为父组件自身的函数，子组件调用该函数，将要传递的数据作为参数传递到父组件")]),t._v(" "),e("li",[t._v("兄弟组件:")]),t._v(" "),e("li",[t._v("跨层级通信: 借助context")]),t._v(" "),e("li",[t._v("全局状态管理: redux等状态管理库")])]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("p",[e("strong",[t._v("父组件向子组件通信: 父组件通过props向子组件传递需要的信息")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父传子")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("useState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//子组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Child")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("子组件"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Father")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child num"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[e("strong",[t._v("子组件向父组件通信: props+回调的方式")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子传父")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("useState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//子组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Child")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("子组件"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("点击修改num"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Father")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child num"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" setNum"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setNum"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])])]),e("h2",{attrs:{id:"ref和state的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref和state的区别"}},[t._v("#")]),t._v(" Ref和State的区别？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("ref")]),e("blockquote",[e("p",[t._v("希望组件存储某些信息，但又不希望这些信息触发组件渲染，则使用ref")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("ref")]),t._v(" "),e("th",[t._v("state")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("useRef(initialValue)返回{ current: initialValue }")]),t._v(" "),e("td",[t._v("useState(initialValue)返回状态变量和状态设置函数的当前值 ( [value, setValue])")])]),t._v(" "),e("tr",[e("td",[t._v("更改ref不会触发重新渲染。")]),t._v(" "),e("td",[t._v("更改state会触发重新渲染。")])]),t._v(" "),e("tr",[e("td",[t._v("可变的--你可以在渲染过程之外修改和更新当前的值。")]),t._v(" "),e("td",[t._v('"不可改变"--你必须使用SetState()来修改状态变量以排队重新渲染。')])]),t._v(" "),e("tr",[e("td",[t._v("在渲染过程中，你不应该读取（或写入）当前值。。")]),t._v(" "),e("td",[t._v("你可以在任何时候读取状态。然而，每次渲染都有自己的状态快照，不会改变。")])])])]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("在React内部，useRef是这么实现的")])]),t._v(" "),e("div",{staticClass:"language-jsx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("initialValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ref"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unused"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" initialValue "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ref"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])]),e("h2",{attrs:{id:"react-memo解决了什么问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-memo解决了什么问题"}},[t._v("#")]),t._v(" React.memo解决了什么问题？")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("p",[t._v("在React中父组件更新会导致子组件也更新(Vue只会更新父组件)，使用memo 缓存子组件，使其不受父级组件更新的影响")]),t._v(" "),e("ul",[e("li",[t._v("但是memo只能缓存纯静态的，不能缓存事件这种动态的，需要搭配useCallback使用")]),t._v(" "),e("li",[t._v("useMemo和useCallback的区别就是 useCallback直接执行函数，而useMemo返回这个函数")]),t._v(" "),e("li",[t._v("函数中返回函数: 高阶组件")])])]),e("h2",{attrs:{id:"对react-context的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对react-context的理解"}},[t._v("#")]),t._v(" 对React Context的理解？")]),t._v(" "),e("blockquote",[e("p",[t._v("跨级通信，context-上下文通信")])]),t._v(" "),e("ol",[e("li",[t._v("创建上下文空间(Provider生产者，Consumer消费者)   const xxxContext = createContext()")]),t._v(" "),e("li",[t._v("要传递的组件包裹在context空间里，为 xxxContext.Provider ，传递的值写在value里面，")]),t._v(" "),e("li",[t._v("底层组件要被包裹在context空间里，为 xxxContext.Consumer，传递多个需要结构 双花括号")])]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("Context 上下文(可以看做是特定组件树内共享的store)")]),e("p",[t._v("React是单向数据流的，父子组件通过props传递数据，但在多层级或者跨层级组件上，需要维持每一层的数据传递，非常繁琐。")]),t._v(" "),e("ul",[e("li",[t._v("Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props，实现跨层级的数据传递")]),t._v(" "),e("li",[t._v("组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性")])])]),e("h2",{attrs:{id:"react在页面重新加载时怎样保留状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react在页面重新加载时怎样保留状态"}},[t._v("#")]),t._v(" React在页面重新加载时怎样保留状态")]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("blockquote",[e("p",[t._v("React项目中使用redux存储全局数据，刷新后数据会被清空？怎么让数据持久化？")])]),t._v(" "),e("ul",[e("li",[t._v("localStorage，浏览器的本地存储且没有时间限制")]),t._v(" "),e("li",[t._v("redux-persist，redux-persist会将redux的store中的数据缓存到浏览器的localStorage中")])])]),e("h2",{attrs:{id:"react-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router"}},[t._v("#")]),t._v(" React-Router")]),t._v(" "),e("ul",[e("li",[t._v("react-router-dom中两种模式； BrowserRouter(History)和HashRouter(Hash模式)\n"),e("ul",[e("li",[t._v("区别是History需要服务器端配置nginx，hash直接打包就可以使用")])])])]),t._v(" "),e("h2",{attrs:{id:"react-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" React-Redux")]),t._v(" "),e("p",[t._v("(后续更新....)")]),t._v(" "),e("blockquote",[e("p",[t._v("Redux是一个状态管理库，可以用于很多框架，而React-redux 是基于Redux的 专门用于react的")])]),t._v(" "),e("div",{staticClass:"theorem"},[e("p",{staticClass:"title"},[t._v("THEOREM")]),e("p",[t._v("我们使用的state都是组件里的，在大型项目我们需要让状态共享，就需要状态管理，在src目录里新建一个store文件夹，里面放 index.js 和reducer.js")]),t._v(" "),e("ul",[e("li",[t._v("store/index.js   //仓库的入口文件")]),t._v(" "),e("li",[t._v("store/reducer.js // 创建初始状态，并导出一个函数")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);